cmake_minimum_required(VERSION 3.0.0)

project(mytorch)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

#check_c_complier_flag("-arch arm64" arm64Supported)
# if (USE_DEBUG)
#   add_definitions(-DDEBUG)
# endif()
# set(CMAKE_OSX_ARCHITECTURES "arm64")
# set(CMAKE_HOST_SYSTEM_PROCESSOR "arm64")
# set(CMAKE_BUILD_TYPE "Release")
# file(GLOB USER_3RDPART_LIB ${CMAKE_CURRENT_SOURCE_DIR}/3rdpart/lib/*.dylib)
# file(GLOB_RECURSE USER_CPP ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp)
# find_package(PkgConfig REQUIRED)
# pkg_check_modules(GLFW REQUIRED glfw3)
# find_package(OpenGL REQUIRED)
#find_package(SFML REQUIRED)
# message("msg=${OPENGL_LIBRARIES}")
#message("msg=${SFML_LIBRARIES}")
# include(${CMAKE_SOURCE_DIR}/cmake/genPreprocessorFile.cmake)
# include_directories(${CMAKE_CURRENT_SOURCE_DIR}/3rdpart/include ${CMAKE_CURRENT_SOURCE_DIR}/include)
# source_header_dir(HD ${CMAKE_CURRENT_SOURCE_DIR}/3rdpart/include)
# source_header_dir(HD ${CMAKE_CURRENT_SOURCE_DIR}/include)
# aux_source_directory(${CMAKE_CURRENT_SOURCE_DIR}/src SRC_FILES)
# gen_preprocessor_file(${HD} ${USER_CPP})
# add_executable(minecraft ${USER_CPP})
# target_link_libraries(minecraft ${OPENGL_LIBRARIES} ${USER_3RDPART_LIB})

message(STATUS ${CMAKE_CURRENT_SOURCE_DIR})
execute_process(COMMAND python3 setup.py build_ext --force --build-lib=${CMAKE_CURRENT_SOURCE_DIR}   WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
# file(GLOB_RECURSE torch_lib ${CMAKE_CURRENT_SOURCE_DIR}/*.so)
# file(COPY ${torch_lib} DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/torch)
